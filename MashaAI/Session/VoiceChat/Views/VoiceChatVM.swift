import Foundation
import Combine
import ElevenLabsSDK

final class VoiceChatVM: ObservableObject {

    enum ViewState {
        case loading
        case connected
        case error
    }

    @Published
    private(set) var status: ElevenLabsSDK.Status = .disconnected

    @Published
    var isConnecting = false

    @Published
    var lastError: String?

    @Published
    private(set) var mode: ElevenLabsSDK.Mode = .listening

    @Published
    private(set) var connectionRetryCount = 0

    @Published
    private(set) var audioLevel: Float = 0.0

    @Published
    private(set) var viewState: ViewState = .loading

    private let config = ElevenLabsSDK.SessionConfig(agentId: "w63wjugjg9aztG1H9JDa")
    private var currentAgentIndex = 0
    private var conversation: ElevenLabsSDK.Conversation?
    private var connectionTask: Task<Void, Never>?
    
    private func startConnection(agent: Agent) async {
        do {
            print("üöÄ Starting conversation session (attempt \(connectionRetryCount + 10))...")

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            try await Task.sleep(nanoseconds: 1_000_000_000)  // 1 —Å–µ–∫—É–Ω–¥–∞

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞
            try Task.checkCancellation()

            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
            let config = ElevenLabsSDK.SessionConfig(agentId: agent.id)

            var callbacks = ElevenLabsSDK.Callbacks()

            callbacks.onConnect = { [weak self] conversationId in
                DispatchQueue.main.async {
                    guard let self else { return }
                    self.viewState = .connected
                    print("‚úÖ Connected successfully with ID: \(conversationId)")
                    self.status = .connected
                    self.isConnecting = false
                    self.connectionRetryCount = 0
                    self.lastError = nil
                }
            }

            callbacks.onDisconnect = { [weak self] in
                DispatchQueue.main.async {
                    guard let self else { return }

                    print("üîå Disconnected")
                    if self.status == .connected {
                        // –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                        self.lastError = "Connection lost unexpectedly"
                    }
                    self.stopConversation()
                }
            }

            callbacks.onMessage = { message, role in
                DispatchQueue.main.async {
                    print("üí¨ Message (\(role)): \(message)")
                }
            }

            callbacks.onError = { [weak self] errorMessage, errorCode in
                DispatchQueue.main.async {
                    guard let self else { return }
                    print("‚ùå Error (\(errorCode ?? -1)): \(errorMessage)")

                    self.viewState = .error

                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞ (–ø—Ä–∏ –ø–µ—Ä–µ–±–∏–≤–∞–Ω–∏–∏)
                    if self.isAgentCorrectionError(errorMessage) {
                        print("‚ÑπÔ∏è Agent response correction detected - this is normal when interrupting")
                        return
                    }

                    self.lastError = errorMessage

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
                    if self.shouldRetryConnection(errorMessage: errorMessage) && self.connectionRetryCount < 2 {
                        self.connectionRetryCount += 1
                        print("üîÑ Will retry connection (\(self.connectionRetryCount)/2) in 3 seconds...")

                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
                            if !self.isConnecting && self.status != .connected {
                                self.connectionTask = Task {
                                    await self.startConnection(agent: agent)
                                }
                            }
                        }
                    } else {
                        print("üí• Max retries reached or non-retryable error")
                        self.stopConversation()
                    }
                }
            }

            callbacks.onStatusChange = { [weak self] newStatus in
                DispatchQueue.main.async {
                    guard let self else { return }

                    print("üìä Status changed: \(newStatus)")
                    self.status = newStatus

                    if newStatus == .disconnected {
                        self.isConnecting = false
                    }
                }
            }

            callbacks.onModeChange = { [weak self] newMode in
                DispatchQueue.main.async {
                    guard let self else { return }
                    print("üé§ Mode changed: \(newMode)")
                    self.mode = newMode
                }
            }

            callbacks.onVolumeUpdate = { [weak self] newVolume in
                DispatchQueue.main.async {
                    guard let self else { return }
                    self.audioLevel = max(0, min(1, newVolume))
                }
            }

            // –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            conversation = try await ElevenLabsSDK.Conversation.startSession(
                config: config,
                callbacks: callbacks
            )

        } catch {
            DispatchQueue.main.async { [weak self] in
                guard let self else { return }
                print("üí• Failed to start conversation: \(error.localizedDescription)")
                self.lastError = error.localizedDescription
                self.stopConversation()
            }
        }
    }

    func stopConversation() {
        print("üßπ Cleaning up conversation...")

        // –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connectionTask?.cancel()
        connectionTask = nil

        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        if let conv = conversation {
            conv.endSession()
        }
        conversation = nil

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        status = .disconnected
        isConnecting = false
        audioLevel = 0.0
        mode = .listening
    }

    func beginConversation() {
        let agent = Agent.masha
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        guard !isConnecting else {
            print("‚ö†Ô∏è Connection already in progress, skipping...")
            return
        }

        if status == .connected {
            print("üîå Disconnecting current session...")
            stopConversation()
            return
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏ –∏ —Å—á–µ—Ç—á–∏–∫
        lastError = nil
        connectionRetryCount = 0
        isConnecting = true

        connectionTask = Task {
            await startConnection(agent: agent)
        }
    }

    private func isAgentCorrectionError(_ errorMessage: String) -> Bool {
        let correctionIndicators = [
            "agent_response_correction",
            "Unknown message type",
            "corrected_agent_response",
            "original_agent_response",
        ]

        let errorLower = errorMessage.lowercased()
        return correctionIndicators.contains { errorLower.contains($0.lowercased()) }
    }

    private func shouldRetryConnection(errorMessage: String) -> Bool {
        let retryableErrors = [
            "Socket is not connected",
            "WebSocket error",
            "Connection failed",
            "Network error",
            "timeout",
        ]

        // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–µ–≤–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è—Ö –∞–≥–µ–Ω—Ç–∞
        let nonRetryableErrors = [
            "unauthorized",
            "forbidden",
            "invalid agent",
            "rate limit",
            "agent_response_correction",
            "Unknown message type",
        ]

        let errorLower = errorMessage.lowercased()

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ-–ø–æ–≤—Ç–æ—Ä—è–µ–º—ã–µ –æ—à–∏–±–∫–∏
        if nonRetryableErrors.contains(where: { errorLower.contains($0) }) {
            return false
        }

        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã–µ
        return retryableErrors.contains { errorLower.contains($0) }
    }
}

// MARK: - Types and Preview
struct Agent {
    let id: String
    let name: String
    let description: String
}

extension Agent {
    static let masha: Self = .init(
        id: "w63wjugjg9aztG1H9JDa",
        name: "Masha",
        description: "AI Assistant"
    )
}
